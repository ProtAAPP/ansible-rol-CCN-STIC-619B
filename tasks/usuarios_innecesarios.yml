- name: Eliminación de usuarios innecesarios
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
  with_items: "{{ usuarios_innecesarios }}"
  when: usuarios_innecesarios is defined
  notify:
    - 619B_Reiniciar_host

- name: Eliminación de otros usuarios innecesarios
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    remove: true
  with_items: "{{ otros_usuarios_innecesarios }}"
  when: otros_usuarios_innecesarios is defined
  notify:
    - 619B_Reiniciar_host

- name: Eliminación de grupos innecesarios
  become: true
  ansible.builtin.group:
    name: "{{ item }}"
    state: absent
  with_items: "{{ grupos_innecesarios }}"
  when: grupos_innecesarios is defined
  notify:
    - 619B_Reiniciar_host

- name: Asignando shell a usuarios root, shutdown y halt
  ansible.builtin.user:
    name: "{{ item.user }}"
    shell: "{{ item.shell }}"
  loop: "{{ shell_usuarios }}"
  notify:
    - 619B_Reiniciar_host

- name: Obtener lista de usuarios con UID >= 1000
  ansible.builtin.command: awk -F{{ ':' }} '$3 >= 1000 && $1 != "nobody" &&  $1 != "nfsnobody" {print $1}' /etc/passwd
  register: usuarios_normales
  changed_when: false
  check_mode: false

- name: Asignar la shell /bin/bash a los usuarios con UID >= 1000
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    shell: "/bin/bash"
  with_items: "{{ usuarios_normales.stdout_lines | difference(shell_usuarios_especificos | map('dict2items') | flatten | selectattr('key', '==', 'user') | map(attribute='value')) }}"
  notify:
    - 619B_Reiniciar_host

- name: Asignar la shell específica a usuarios con UID >= 1000
  become: true
  ansible.builtin.user:
    name: "{{ item.user }}"
    shell: "{{ item.shell }}"
  with_items: "{{ shell_usuarios_especificos }}"
  when: shell_usuarios_especificos is defined and shell_usuarios_especificos != None
  notify:
    - 619B_Reiniciar_host

